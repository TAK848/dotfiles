autoload -Uz compinit && compinit

setopt auto_pushd
setopt pushd_ignore_dups
setopt auto_cd
setopt hist_ignore_dups
setopt share_history
setopt inc_append_history

set nrformats=hex,bin

export HISTFILE=~/.zsh_history
export HISTSIZE=100000
export SAVEHIST=100000

alias vi="nvim"
alias vim="nvim"
alias view="nvim -R"

ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"
[ ! -d $ZINIT_HOME ] && mkdir -p "$(dirname $ZINIT_HOME)"
[ ! -d $ZINIT_HOME/.git ] && git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"
source "${ZINIT_HOME}/zinit.zsh"

autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

zinit light-mode for \
    zdharma-continuum/zinit-annex-as-monitor \
    zdharma-continuum/zinit-annex-bin-gem-node \
    zdharma-continuum/zinit-annex-patch-dl \
    zdharma-continuum/zinit-annex-rust

zinit light zsh-users/zsh-autosuggestions
zinit light zsh-users/zsh-syntax-highlighting
zinit load agkozak/zsh-z

alias killQL='killall -9 -v QuickLookUIService'
export PATH="/opt/homebrew/opt/tcl-tk/bin:$PATH"

alias mkcd='(){mkdir $1;cd $1}'

# alias ls="eza"
# alias cat="bat"
# alias grep="rg"
# alias find="fd"

chpwd() {
    if [[ $(pwd) != $HOME ]]; then;
        ls -la
    fi
}

export PATH=$PATH:$HOME/bin


# 1. Homebrewのインストールチェック
if ! command -v brew &> /dev/null; then
  echo "Homebrew not found. Installing Homebrew..."
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  # HomebrewをPATHに追加する（macOSの標準的な設定）
  if [[ "$(uname)" == "Darwin" ]] && [[ "$(uname -m)" == "arm64" ]]; then
      eval "$(/opt/homebrew/bin/brew shellenv)"
  else
      eval "$(/usr/local/bin/brew shellenv)"
  fi
  echo "Homebrew installed successfully."
else
  # echo "Homebrew is already installed."
fi

# Homebrewが使えることを確認してから次に進む
if ! command -v brew &> /dev/null; then
    echo "Brew command is still not available. Please check your Homebrew installation and PATH."
    exit 1
fi

# 2. direnvのインストールチェック
if ! command -v direnv &> /dev/null; then
  echo "direnv not found. Installing direnv via Homebrew..."
  brew install direnv
  echo "direnv installed successfully."
else
  # echo "direnv is already installed."
fi

# 3. aquaのインストールチェック
if ! command -v aqua &> /dev/null; then
  echo "aqua not found. Installing aqua via Homebrew..."
  brew install aquaproj/aqua/aqua
  echo "aqua installed successfully."
fi

# 毎回aqua installを実行（必要なツールがあればインストールされる）
aqua i -a -l

# fzfの設定 (aqua経由でインストールされるfzfを使用)
if command -v fzf &> /dev/null; then
  source <(fzf --zsh)
fi
# fbr - checkout git branch (including remote branches), sorted by most recent commit, limit 30 last branches
fbr() {
  local branches branch
  branches=$(git for-each-ref --count=30 --sort=-committerdate refs/heads/ --format="%(refname:short)") &&
  branch=$(echo "$branches" |
           fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
  git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}

# プロセスをkill
fkill() {
  local pid
  pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')

  if [ "x$pid" != "x" ]
  then
    echo $pid | xargs kill -${1:-9}
  fi
}


export PATH="$(aqua root-dir)/bin:$PATH"
export AQUA_GLOBAL_CONFIG=${AQUA_GLOBAL_CONFIG:-}:${XDG_CONFIG_HOME:-$HOME/.config}/aquaproj-aqua/aqua.yaml
# https://zenn.dev/shunsuke_suzuki/articles/aqua-nodejs-support#aqua-%E3%81%A7-node.js-%E3%82%92%E7%AE%A1%E7%90%86%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95
export NPM_CONFIG_PREFIX=${XDG_DATA_HOME:-$HOME/.local/share}/npm-global
export PATH=$NPM_CONFIG_PREFIX/bin:$PATH

